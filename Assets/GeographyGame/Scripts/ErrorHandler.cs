using System;
using UnityEngine;

namespace WPM
{
    public class ErrorHandler : MonoBehaviour, IErrorHandler
    {
        private GameManager gameManager;
        private System.Exception exception;
        private string errorMessage;
        public ErrorState ErrorState { get; set; } = ErrorState.no_error;
        private IUIManager uiManager;
        private IErrorUI errorUI;

        void Awake()
        {
            gameManager = FindObjectOfType<GameManager>();
            uiManager = FindObjectOfType<InterfaceFactory>().UIManager;
        }

        void Start()
        {
            errorUI = uiManager.ErrorUI;
        }

        /// <summary>
        ///  Report an error to the user using the game's error panel
        ///  The panel also reports the stacktrace from the location of the error
        /// </summary>
        /// <param name="message"></param> The error message for the user>
        /// <param name="state"<>/param> The state the error handler should be set to>
        /// <returns></returns> 
        public void reportError(string message, ErrorState state)
        {
            ErrorState = state;
            errorUI.setErrorMessage(message);
            errorUI.setStackTrace(Environment.StackTrace);
            errorUI.OpenUI();
        }

        /// <summary>
        ///  Report an exception to the user using the game's error panel.
        ///  Reports the error message generated by unity as well as the stacktrace
        /// </summary>
        /// <param name="ex"></param> The exception to report to the user>
        /// <returns></returns> 
        public void catchException(Exception ex, ErrorState state)
        {
            string combinedStackTrace = ex.StackTrace;
            var inner = ex.InnerException;
            while (inner != null)
            {
                combinedStackTrace = combinedStackTrace + inner.StackTrace;
                inner = inner.InnerException;
            }
            errorUI.setErrorMessage(ex.Message);
            errorUI.setStackTrace(combinedStackTrace);
            errorUI.OpenUI();
        }

        /// <summary>
        ///  Execute the error responce determined by the error handler's error state
        /// </summary>
        public void errorResponse()
        {
            switch (ErrorState)
            {
                case (ErrorState.close_window):
                    errorUI.CloseUI();
                    break;

                case (ErrorState.restart_scene):
                    gameManager.GameReset();
                    break;

                case (ErrorState.close_application):
                    gameManager.ExitGame();
                    break;

                default:
                    gameManager.ExitGame();
                    break;
            }
                
        }

    }
}
