using System;
using UnityEngine;

namespace WPM
{
    public class ErrorHandler : MonoBehaviour, IErrorHandler
    {
        [SerializeField] private GameObject errorUIObject;
        private IGameManager gameManager;
        private IUIManager uiManager;
        private IErrorUI errorUI;
        private IGlobeManager globeManager;
        private Exception exception;
        private string errorMessage;
        private bool errorUIInitialized = false;
        private InterfaceFactory interfaceFactory;
        public ErrorState ErrorState { get; set; } = ErrorState.no_error;
        
        void Awake()
        {
            if (errorUIObject == null)
                EmergencyExit("Error UI Game Object Not Found");
   
            errorUI = errorUIObject.GetComponent(typeof(IErrorUI)) as IErrorUI;
            if(errorUI == null)
                EmergencyExit("Error UI Script Not Found");
            else
                errorUIInitialized = true;

            interfaceFactory = FindObjectOfType<InterfaceFactory>();
            if (interfaceFactory == null)
                EmergencyExit("Interface Factory not found");
        }

        void Start()
        {
            uiManager = interfaceFactory.UIManager;
            if (uiManager == null)
                ReportError("UI Manager not found", ErrorState.close_application);

            gameManager = interfaceFactory.GameManager;
            if (gameManager == null)
                ReportError("Game Manager not found", ErrorState.close_application);

            globeManager = interfaceFactory.GlobeManager;
            if (interfaceFactory.GlobeManager == null)
                ReportError("Globe Manager not found", ErrorState.close_application);

            if (ErrorState == ErrorState.no_error)
                errorUI.CloseUI();
        }

        /// <summary>
        ///  Report an error to the user using the game's error panel
        ///  The panel also reports the stacktrace from the location of the error
        /// </summary>
        /// <param name="message"></param> The error message for the user>
        /// <param name="state"<>/param> The state the error handler should be set to>
        /// <returns></returns> 
        public void ReportError(string message, ErrorState state)
        {
            if (!errorUIInitialized)
                Awake();
            ErrorState = state;
            errorUI.setErrorMessage(message);
            errorUI.setStackTrace(Environment.StackTrace);
            errorUI.OpenUI();
        }

        /// <summary>
        ///  Report an exception to the user using the game's error panel.
        ///  Reports the error message generated by unity as well as the stacktrace
        /// </summary>
        /// <param name="ex"></param> The exception to report to the user>
        /// <param name="state"<>/param> The state the error handler should be set to>
        /// <returns></returns> 
        public void CatchException(Exception ex, ErrorState state)
        {
            ErrorState = state;

            if (!errorUIInitialized)
                Awake();

            string combinedStackTrace;
            
            if (ex == null)
            {
                errorUI.setErrorMessage("Exception Missing");
            }
            else
            {
                combinedStackTrace = ex.StackTrace;
                var inner = ex.InnerException;
                while (inner != null)
                {
                    combinedStackTrace = combinedStackTrace + inner.StackTrace;
                    inner = inner.InnerException;
                }
                errorUI.setErrorMessage(ex.Message);
                errorUI.setStackTrace(combinedStackTrace);
            }  
            
            errorUI.OpenUI();
        }

        /// <summary>
        ///  Execute the error responce determined by the error handler's error state
        /// </summary>
        public void ErrorResponse()
        {
            if (!errorUIInitialized)
                Awake();

            switch (ErrorState)
            {
                case (ErrorState.close_window):
                    errorUI.CloseUI();
                    break;

                case (ErrorState.restart_scene):
                    gameManager.GameReset();
                    break;

                case (ErrorState.close_application):
                    gameManager.ExitGame();
                    break;

                default:
                    gameManager.ExitGame();
                    break;
            }
                
        }

        public void EmergencyExit(string message)
        {
            Debug.Log(message);
            Application.Quit();
        }

    }
}
